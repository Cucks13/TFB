import os
from pathlib import Path
import importlib

import extract
import transform
import load

# Obtener la variable de entorno para la ruta de datos
DATA_PATH = os.getenv("DATA_PATH", "/app/data")

def load_scoring_modules():
    """Carga din√°micamente los m√≥dulos de scoring en la carpeta actual."""
    scoring_modules = {}
    scoring_path = Path(__file__).parent

    for file in scoring_path.glob("scoring_*.py"):
        module_name = file.stem  # Nombre del m√≥dulo sin extensi√≥n
        try:
            module = importlib.import_module(f"app.{module_name}")  # Importaci√≥n correcta para Docker
            if hasattr(module, "run"):
                scoring_modules[module_name] = module.run
        except Exception as e:
            print(f"‚ö†Ô∏è Error al importar {module_name}: {e}")

    return scoring_modules

def main():
    print("üöÄ Iniciando proceso ETL...")

    # Extracci√≥n de datos
    try:
        data = extract.run(DATA_PATH)
        print("‚úÖ Extracci√≥n completada.")
    except Exception as e:
        print(f"‚ùå Error en extracci√≥n: {e}")
        return  # Salir si hay error cr√≠tico

    # Transformaci√≥n de datos
    try:
        transformed_data = transform.run(data, DATA_PATH)
        print("‚úÖ Transformaci√≥n completada.")
    except Exception as e:
        print(f"‚ùå Error en transformaci√≥n: {e}")
        return  # Salir si hay error cr√≠tico

    # Aplicar scoring
    try:
        scoring_modules = load_scoring_modules()
        for name, scoring_func in scoring_modules.items():
            transformed_data = scoring_func(transformed_data)
            print(f"‚úÖ Scoring aplicado: {name}")
    except Exception as e:
        print(f"‚ùå Error en scoring: {e}")

    # Carga de datos
    try:
        load.run(transformed_data, DATA_PATH)
        print("‚úÖ Carga completada.")
    except Exception as e:
        print(f"‚ùå Error en carga de datos: {e}")

    print("üéâ Proceso ETL finalizado con √©xito.")

if __name__ == "__main__":
    main()
